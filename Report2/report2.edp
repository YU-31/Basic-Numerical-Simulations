border bottom(t=-5, 5){x=t; y=-5; label=1;}
border out(t=-5, 5){x=5; y=t; label=3;}
border top(t=5, -5){x=t; y=5; label=1;}
border in(t=5, -5){x=-5; y=t; label=2;} 

border b1(t=0, -pi/2){x=0.5+2*cos(t); y=-0.5+2*sin(t); label=1;}
border c1(t=-2.5, -3.5){x=0.5; y=t; label=1;}
border c2(t=0.5, -0.5){x=t; y=-3.5; label=1;}
border c3(t=-3.5, -2.5){x=-0.5; y=t; label=1;}
border b2(t=-pi/2, -pi){x=-0.5+2*cos(t); y=-0.5+2*sin(t); label=1;}
border c4(t=-2.5, -3.5){x=t; y=-0.5; label=1;}
border c5(t=-0.5, 0.5){x=-3.5; y=t; label=1;}
border c6(t=-3.5, -2.5){x=t; y=0.5; label=1;}
border b3(t=-pi, -3*pi/2){x=-0.5+2*cos(t); y=0.5+2*sin(t); label=1;}
border c7(t=2.5, 3.5){x=-0.5; y=t; label=1;}
border c8(t=-0.5, 0.5){x=t; y=3.5; label=1;}
border c9(t=3.5, 2.5){x=0.5; y=t; label=1;}
border b4(t=-3*pi/2, -2*pi){x=0.5+2*cos(t); y=0.5+2*sin(t); label=1;}
border c10(t=2.5, 3.5){x=t; y=0.5; label=1;}
border c11(t=0.5, -0.5){x=3.5; y=t; label=1;}
border c12(t=3.5, 2.5){x=t; y=-0.5; label=1;}

border d1(t=0,-2*pi){x=3+cos(t); y=3+sin(t); label=1;}
border d2(t=0,-2*pi){x=-3+cos(t); y=3+sin(t); label=1;}
border d3(t=0,-2*pi){x=-3+cos(t); y=-3+sin(t); label=1;}
border d4(t=0,-2*pi){x=3+cos(t); y=-3+sin(t); label=1;}

int n=1.25;
mesh Th = buildmesh(bottom(10*n) + out(10*n) + top(10*n) + in(10*n) + b1(10*n) + c1(10*n) + c2(10*n) + c3(10*n) + b2(10*n) + c4(10*n) + c5(10*n) + c6(10*n) + b3(10*n) + c7(10*n) + c8(10*n) + c9(10*n) + b4(10*n) + c10(10*n) + c11(10*n) + c12(10*n) + d1(30*n) + d2(30*n) + d3(30*n) + d4(30*n));
plot(Th, wait=1);

fespace Vh1(Th,P2);
fespace Vh2(Th,P1);

int Re = 10;
real dt = 0.05;
int i;

Vh1 u1, u2, v1, v2, v, f = exp(-10*((x+4)^2 +y^2));
Vh2 p, q, up1, up2, fp;

problem Prob([u1, u2, p, f], [v1, v2, q, v], solver=UMFPACK, init=i)
    =int2d(Th) //navie-stokes equation
        (
            u1*v1 / dt + u2*v2 / dt
            + 1/Re * (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2))
            - p * (dx(v1) + dy(v2))
            - q * (dx(u1) + dy(u2))
        )
    - int2d(Th)
        (
            (v1 * convect([up1, up2], -dt, up1) + v2  * convect([up1, up2], -dt, up2)) / dt
        )
    + int2d(Th) //diffusion equation
        (
            f * v /dt
            + (dx(f)*dx(v)+dy(f)*dy(v))
        )
    - int2d(Th)
        (
            (v * convect([up1, up2], -dt, fp)) /dt
        )
    +on(1, u1=0, u2=0) //boundary conditions
    +on(2, u1=abs(cos(y)), u2=0);

for (i=0; i<500; i++)
    {
        up1 = u1;
        up2 = u2;
        fp = f;

        Prob;

        plot([u1, u2], f);
    };